S=Scompute(g,X_test_scale,d)
compute<-function(lvec, theta, s){
u<-0
v<-0
for (i in 1:s) {
u<-u+lvec[i]*cos(pi*sum(theta[1:i]))
v<-v+lvec[i]*sin(pi*sum(theta[1:i]))
}
y<-sqrt(u^2+v^2)
return(list(u=u,v=v,y=y))
}
compute(lvec = c(1,1,1), theta = c(1/3,2/3,1/3), s = 3)
compute(lvec = c(1,1,1), theta = c(2/3,2/3,2/3), s = 3)
compute(lvec = c(1,1,1), theta = c(2/3,1/3,1/3), s = 3)
compute<-function(lvec, theta, s){
u<-0
v<-0
for (i in 1:s) {
u<-u+lvec[i]*cos(pi*sum(theta[1:i]))
v<-v+lvec[i]*sin(pi*sum(theta[1:i]))
}
y<-sqrt(u^2+v^2)
return(list(u=u,v=v,y=y))
}
compute(lvec = c(1,1,1), theta = c(2/3,1/3,1/3), s = 3)
install.packages('gurobi')
install.packages('gurobi_10.0-0')
install.packages('gurobi_10.0-0')
install.packages('gurobi_10.0-0')
install.packages('gurobi_10.0-0',type = 'source')
install.packages('gurobi_10.0-0',type = 'source',repos = NULL)
install.packages('gurobi_10.0-0.zip',type = 'source',repos = NULL)
library(gurobi)
install.packages('slam')
library(gurobi)
setwd("C:\\Users\\Xiaoyang Wu\\Desktop\\code\\Sample selection with diversity control")
install.packages("PASS_0.1.0.tar.gz",
repos=NULL, type="source")
install.packages('Rtools')
update.packages('Rtools')
install.packages("installr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
library(stringr)
library(installr)
install.Rtools()
install.packages("PASS_0.1.0.tar.gz",
repos=NULL, type="source")
devtools::install_local("/path/to/file/PASS_0.1.0.tar.gz", repos = NULL, type="source")
devtools::install_local("PASS_0.1.0.tar.gz", repos = NULL, type="source")
?Tcompute
library(PASS)
?PASS_sampling
setwd("C:\\Users\\Xiaoyang Wu\\Desktop\\code\\Sample selection with diversity control")
NullIndex <- function(y, Value){
if(Value$type=="==A"){
index <- which(y==Value$v)
}else if(Value$type=="<=A"){
index <- which(y<=Value$v)
}else if(Value$type==">=B"){
index <- which(y>=Value$v)
}else if(Value$type=="<=A|>=B"){
index <- which(y<=Value$v[1]|y>=Value$v[2])
}else if(Value$type==">=A&<=B"){
index <- which(y>=Value$v[1]&y<=Value$v[2])
}
return(index)
}
devtools::install_local("PASS_0.1.0.tar.gz", repos = NULL, type="source")
library(PASS)
N=3000
n=400
alpha=0.1
K=5
d=4
algo=new('RF')
lambda=500
source("algoclass_PASS.R")
algo=new('RF')
lambda=500
g='RBF'
m=100
X <- matrix(runif(n*d, -1, 1), nrow = n, ncol = d)
Xtest <- matrix(runif(N*d, -1, 1), nrow = N, ncol = d)
Y <- 10*X[, 1]+7*X[, 2]^2+7*exp(X[, 3]+2*X[, 4]^2)+rnorm(n, sd = 1)
Ytest <- 10*Xtest[, 1]+7*Xtest[, 2]^2+7*exp(Xtest[, 3]+2*Xtest[, 4]^2)+rnorm(N, sd = 1)
Value <- list(type = ">=A&<=B",v = c(quantile(Ytest, 0.1), quantile(Ytest, 0.9)))
Null <- NullIndex(Y, Value)
PASS::PASS_sampling(X, Y, Xtest, Null, g, m, alpha)
PASS_sampling(X, Y, Xtest, Null, g, m, alpha)
?PASS_sampling
remove.packages('PASS', lib = file.path('/usr/local/lib/R/library'))
remove.packages('PASS', lib = file.path('C:/Users/Xiaoyang Wu/AppData/Local/R/win-library/4.2'))
devtools::install_local("PASS_0.1.0.tar.gz", repos = NULL, type="source")
devtools::install_local("PASS_0.1.0.tar.gz", repos = NULL, type="source")
library(PASS)
library(gurobi)
library(kernlab)
library(MASS)
library(ks)
library(foreach)
library(randomForest)
library(doParallel)
require(tidyverse)
require(ggplot2)
library(ggpubr)
library(nnet)
library(caret)
library(PASS)
source("algoclass_PASS.R")
NullIndex <- function(y, Value){
if(Value$type=="==A"){
index <- which(y==Value$v)
}else if(Value$type=="<=A"){
index <- which(y<=Value$v)
}else if(Value$type==">=B"){
index <- which(y>=Value$v)
}else if(Value$type=="<=A|>=B"){
index <- which(y<=Value$v[1]|y>=Value$v[2])
}else if(Value$type==">=A&<=B"){
index <- which(y>=Value$v[1]&y<=Value$v[2])
}
return(index)
}
N=3000
n=400
alpha=0.1
K=5
d=4
algoarray=c(new('NN-R'),new("RF"),new('SVM-R'))
algo=new('RF')
lambda=500
g='RBF'
m=100
X <- matrix(runif(n*d, -1, 1), nrow = n, ncol = d)
Xtest <- matrix(runif(N*d, -1, 1), nrow = N, ncol = d)
Y <- 10*X[, 1]+7*X[, 2]^2+7*exp(X[, 3]+2*X[, 4]^2)+rnorm(n, sd = 1)
Ytest <- 10*Xtest[, 1]+7*Xtest[, 2]^2+7*exp(Xtest[, 3]+2*Xtest[, 4]^2)+rnorm(N, sd = 1)
Value <- list(type = ">=A&<=B",v = c(quantile(Ytest, 0.1), quantile(Ytest, 0.9)))
Null <- NullIndex(Y, Value)
Index <- PASS_sampling(X, Y, Xtest, Null, g, m, alpha, algo = algo)
View(Index)
Pi_recover <- rep(0, dim(data.frame(X_test))[1])
X_test<-Xtest
Pi_recover <- rep(0, dim(data.frame(X_test))[1])
Pi_recover[Screened] <- Pi
X_label <- X
Y_label <- Y
Null_label <- Null
TrainIndex <- sample(1:n, floor(n/2))
data_label <- data.frame(x = X_label, y = Y_label)
X_train <- as.matrix(data_label[TrainIndex,])[, 1:d]
X_cal <- as.matrix(data_label[-TrainIndex,])[, 1:d]
Y_train <- as.matrix(data_label[TrainIndex,])[, d+1]
Y_cal <- as.matrix(data_label[TrainIndex,])[, d+1]
X_test <- as.matrix(data.frame(x = X_test))
model <- fitting(algo, X_train, Y_train, lambda = lambda)
W_cal <- Pred(algo, model, X_cal)
W_test <- Pred(algo, model, X_test)
Null_cal <- which(as.numeric(names(W_cal))%in%Null_label)
TN <- Tcompute(W_cal, W_test, Null_cal, classification)
TN <- Tcompute(W_cal, W_test, Null_cal, classification = F)
Screened <- which(TN<=0.5)
Pi <- SolvePi(TN, m, S, Screened, alpha)
d <- dim(data.frame(X_label))[2]
n <- dim(data.frame(X_label))[1]
X_test_scale <- scale(X_test, center = TRUE, scale = TRUE)
S <- Scompute(g, X_test_scale, d)
Pi <- SolvePi(TN, m, S, Screened, alpha)
Pi_recover <- rep(0, dim(data.frame(X_test))[1])
Pi_recover[Screened] <- Pi
Pi_recover
Sampled <- sample(1:N, m, replace = TRUE, Pi_recover)
setwd("C:\\Users\\Xiaoyang Wu\\Desktop\\code\\Sample selection with diversity control\\PASS")
devtools::document()
remove.packages('PASS', lib = file.path('C:/Users/Xiaoyang Wu/AppData/Local/R/win-library/4.2'))
